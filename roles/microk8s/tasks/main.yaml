---
# ----------------------------------------------------
# Install microk8s
# ----------------------------------------------------

- name: Install microk8s
  become: yes
  snap:
    name: microk8s
    classic: yes
    channel: "{{ microk8s_version }}"

- name: Add user 'ubuntu' to group microk8s
  user:
    name: ubuntu
    group: microk8s
    append: yes

- name: Wait for microk8s to be ready
  shell: "microk8s status --wait-ready"
  changed_when: False

- name: Set File Descriptor Limits for Microk8s
  lineinfile:
    dest: /var/snap/microk8s/current/args/containerd-env
    line: "ulimit -n 65536"
    state: present

# ----------------------------------------------------------
# Workaround to be able to connect to microk8s remotely
# https://github.com/ubuntu/microk8s/issues/421
# ----------------------------------------------------------

- name: Check IP is already included in the template
  shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | grep '= {{ansible_host}}' | wc -l"
  register: ip_included
  changed_when: False

- name: Get highest entry in the list of IPs (conf)
  shell: "cat /var/snap/microk8s/current/certs/csr.conf | sed -nr 's/IP\\.([0-9]+).*/\\1/p' | sort | tail -n 1"
  register: csr_output
  when: ip_included.stdout_lines[0]|int == 0

- name: Get highest entry in the list of IPs (template)
  shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | sed -nr 's/IP\\.([0-9]+).*/\\1/p' | sort | tail -n 1"
  register: csr_template_output
  when: ip_included.stdout_lines[0]|int == 0

- name: Add IP entry
  lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    insertafter: "^IP.{{csr_template_output.stdout_lines[0]}} = .*"
    line: "IP.{{csr_output.stdout_lines[0]|int + 1}} = {{ansible_host}}"
  register: csr_mod_result
  when: ip_included.stdout_lines[0]|int == 0

- name: Restart microk8s (stop)
  shell: "microk8s.stop"
  when: ip_included.stdout_lines[0]|int == 0

- name: Restart microk8s (start)
  shell: "microk8s.start"
  when: ip_included.stdout_lines[0]|int == 0
  ignore_errors: True

- name: Wait for microk8s to be ready after updating the CSR
  shell: "microk8s status --wait-ready"
  changed_when: False
  when: ip_included.stdout_lines[0]|int == 0

# ----------------------------------------------------
# Download Kubeconfig
# ----------------------------------------------------

- name: Write config to file
  shell: "microk8s.config > /root/.kube/conf"

- name: Write config to 2nd file (will contain the external IP of MetalLB)
  shell: "microk8s.config > /root/.kube/conf-with-external-ip"

- name: Replace IP in config (to use the external IP of MetalLB)
  replace:
    path: "/root/.kube/conf-with-external-ip"
    regexp: 'server: https://[0-9\\.]+:16443'
    replace: "server: https://{{ansible_host}}:16443"

- name: Download kubeconf
  fetch:
    src: /root/.kube/conf-with-external-ip
    dest: "{{generated_kubeconf_file}}"
    flat: yes
    fail_on_missing: yes

# ----------------------------------------------------
# Get microk8s status
# ----------------------------------------------------
- name: Get microk8s status
  shell: "microk8s status"
  changed_when: False
  register: microk8s_status

# ----------------------------------------------------
# DNS
# ----------------------------------------------------

- name: MicroK8S - Enable DNS
  shell: "microk8s enable dns"
  when: '"dns: enabled" not in microk8s_status.stdout_lines'

# ----------------------------------------------------
# Dashboard
# ----------------------------------------------------

- name: MicroK8S - Enable Dashboard
  shell: "microk8s enable dashboard"
  when: '"dashboard: enabled" not in microk8s_status.stdout_lines'

# ----------------------------------------------------
# MetalLB
# ----------------------------------------------------

- name: MetalLB set ip range
  set_fact:
    metallb_ip_begin: "{{hostvars[inventory_hostname].ansible_ssh_host}}"
    metallb_ip_end: "{{hostvars[inventory_hostname].ansible_ssh_host}}"
  when: '"metallb: enabled" not in microk8s_status.stdout_lines'

- name: MetalLB IP range (debug)
  debug:
    msg: "{{metallb_ip_begin}} - {{metallb_ip_end}}"
  when: '"metallb: enabled" not in microk8s_status.stdout_lines'

- name: MetalLB - Enable MetalLB
  shell: "microk8s enable metallb:{{metallb_ip_begin}}-{{metallb_ip_end}}"
  when: '"metallb: enabled" not in microk8s_status.stdout_lines'
