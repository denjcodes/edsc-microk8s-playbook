---
- hosts: localhost
  tags:
    - openstack
  tasks:
    - name: create network
      os_network:
        name: "{{ network_name }}"

    - name: create subnet
      os_subnet:
        network_name: "{{ network_name }}"
        name: "{{ subnet_name }}"
        cidr: 192.168.0.0/24
        dns_nameservers:
          - "{{ dns_server_1 }}"
          - "{{ dns_server_2 }}"
      register: subnet

    - name: create router
      os_router:
        name: "{{ router_name }}"
        network: "{{ external_network_name }}"
        interfaces:
          - "{{ subnet_name }}"
          # Enable if you experience problems (re-creating) the router
          # enable_snat: yes # cf. https://github.com/ansible/ansible/issues/29903
      register: router

    - name: Set variables
      set_fact:
        state: present
        routeruuid: "{{ router.id }}"
        subnetuuid: "{{ subnet.id }}"

    - name: Create OpenStack instance
      os_server:
        security_groups: "{{security_group}}"
        name: "{{ nodes_name }}{{ item }}"
        image: "{{ nodes_image }}"
        key_name: "{{ key_name }}"
        flavor_ram: "{{ nodes_flavor_ram if not nodes_flavor_name else omit }}"
        flavor: "{{ nodes_flavor_name if nodes_flavor_name else omit }}"
        nics:
          - net-name: "{{ network_name }}"
        floating_ip_pools: "{{ floating_ip_pools }}"
        userdata: |
          #cloud-config
          package_upgrade: true
          hostname: "{{ nodes_name }}{{ item }}"
          manage_etc_hosts: false
          packages:
            - python
            - python-simplejson
      when: state == "present"
      register: "instances"
      with_sequence: count={{ nodes_count }}

    - name: Remove any existing public keys in local '{{ ssh_known_hosts_file }}'
      known_hosts:
        name: "{{ item.openstack.accessIPv4 }}"
        state: "absent"
        path: "{{ ssh_known_hosts_file }}"
      with_items: "{{ instances.results }}"

    - name: Update inventory
      add_host:
        name: "{{ item.server.name }}"
        ansible_ssh_host: "{{ item.openstack.accessIPv4 }}"
        ansible_ssh_user: ubuntu
        groupname: nodes
      with_items: "{{ instances.results }}"
      when: state == "present"

    - name: Save inventory to file
      template:
        src: files/inventory-out-template.j2
        dest: generated-server-list.txt
      when: state == "present"

- hosts: all
  gather_facts: False
  tags:
    - openstack
  tasks:
    - name: Wait during nodes boot
      wait_for:
        host: "{{ hostvars[item]['ansible_ssh_host'] }}"
        port: 22
        connect_timeout: 20
        timeout: 600
        search_regex: OpenSSH
      vars:
        ansible_connection: local
      with_items: "{{ groups.nodes }}"

- hosts: all
  gather_facts: False
  tasks:
    - name: Wait for cloud-init to finish
      raw: while ! test -f /var/lib/cloud/instance/boot-finished; do sleep 1; done
      retries: 5
      delay: 1
      tags:
        - skip_ansible_lint

- hosts: localhost
  connection: local
  tags:
    - openstack

  tasks:
    - name: For each host, scan for its ssh public key
      shell: "ssh-keyscan -trsa {{ hostvars[item]['ansible_ssh_host'] }}"
      with_items: "{{ groups.nodes }}"
      register: ssh_known_host_results
      until: ssh_known_host_results.stdout != ''
      retries: 75
      ignore_errors: yes

    - debug: msg="{{ groups.nodes }}"

    - name: Add/update the public key in the '{{ ssh_known_hosts_file }}'
      known_hosts:
        name: "{{ hostvars[item.item]['ansible_ssh_host'] }}"
        key: "{{ item.stdout }}"
        state: "present"
        path: "{{ ssh_known_hosts_file }}"
      with_items: "{{ ssh_known_host_results.results }}"

- hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tags:
    - base
  tasks:
    - name: Install packages
      apt:
        name: ["python3", "python3-pip", "snapd"]
        state: present
        update_cache: yes

    - name: Disable Swap
      command: swapoff -a

    - name: Set ip forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        sysctl_set: yes

- hosts: all
  user: ubuntu
  become: yes
  become_user: root
  tags:
    - microk8s
  tasks:
    # ----------------------------------------------------
    # Install microk8s
    # ----------------------------------------------------

    - name: Install microk8s
      become: yes
      snap:
        name: microk8s
        classic: yes
        channel: "{{ microk8s_version }}"

    - name: Add user 'ubuntu' to group microk8s
      user:
        name: ubuntu
        group: microk8s
        append: yes

    - name: Wait for microk8s to be ready
      shell: "microk8s status --wait-ready"

    - name: Set File Descriptor Limits for Microk8s
      lineinfile:
        dest: /var/snap/microk8s/current/args/containerd-env
        line: "ulimit -n 65536"
        state: present

    # ----------------------------------------------------------
    # Workaround to be able to connect to microk8s remotely
    # https://github.com/ubuntu/microk8s/issues/421
    # ----------------------------------------------------------
    - name: Check IP is already included in the template
      shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | grep '= {{ansible_host}}' | wc -l"
      register: ip_included

    - name: Get highest entry in the list of IPs (conf)
      shell: "cat /var/snap/microk8s/current/certs/csr.conf | sed -nr 's/IP\\.([0-9]+).*/\\1/p' | sort | tail -n 1"
      register: csr_output
      when: ip_included.stdout_lines[0]|int == 0

    - name: Get highest entry in the list of IPs (template)
      shell: "cat /var/snap/microk8s/current/certs/csr.conf.template | sed -nr 's/IP\\.([0-9]+).*/\\1/p' | sort | tail -n 1"
      register: csr_template_output
      when: ip_included.stdout_lines[0]|int == 0

    - name: Add IP entry
      lineinfile:
        path: /var/snap/microk8s/current/certs/csr.conf.template
        insertafter: "^IP.{{csr_template_output.stdout_lines[0]}} = .*"
        line: "IP.{{csr_output.stdout_lines[0]|int + 1}} = {{ansible_host}}"
      register: csr_mod_result
      when: ip_included.stdout_lines[0]|int == 0

    - name: Restart microk8s
      shell: "microk8s.stop && microk8s.start"
      when: ip_included.stdout_lines[0]|int == 0

    # ----------------------------------------------------
    # Download Kubeconfig
    # ----------------------------------------------------

    - name: Write config to file
      shell: "microk8s.config > /root/microk8s-kube.conf"

    - name: Replace IP in config
      replace:
        path: /root/microk8s-kube.conf
        regexp: 'server: https://[0-9\\.]+:16443'
        replace: "server: https://{{ansible_host}}:16443"

    - name: Download kubeconf
      fetch:
        src: /root/microk8s-kube.conf
        dest: "generated-kube.conf"
        flat: yes
        fail_on_missing: yes

    # ----------------------------------------------------
    # DNS
    # ----------------------------------------------------

    - name: MicroK8S - Enable DNS
      shell: "microk8s enable dns"

    # ----------------------------------------------------
    # Dashboard
    # ----------------------------------------------------

    - name: MicroK8S - Enable Dashboard
      shell: "microk8s enable dashboard"

    # ----------------------------------------------------
    # MetalLB
    # ----------------------------------------------------

    - name: MetalLB Namespace
      shell: "microk8s.kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml"

    - name: MetalLB
      shell: "microk8s.kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml"

    - name: MetalLB Secret
      shell: 'microk8s.kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"'

    - name: Create temporary dir for MetalLB config map
      tempfile:
        state: file
        prefix: terraform
        suffix: .yaml
      register: metallb_temp_config

    - name: Save inventory to file
      template:
        src: files/metallb-configmap.yaml.j2
        dest: "{{metallb_temp_config.path}}/metallb-configmap.yaml"

    - name: MetalLB Configmap
      shell: "microk8s.kubectl apply -f {{metallb_temp_config.path}}/metallb-configmap.yaml"
